<?xml version="1.0"?>
<project name="open-tides" basedir="." default="usage">	
	<property name="src.dir" value="src" />
	<property name="resources" value="resources" />
	<property name="resources.dir" value="src/${resources}" />
	<property name="web.dir" value="WebContent" />		
	<property name="test.dir" value="test" />
	<property name="lib.dir" value="WebContent/WEB-INF/lib" />	
	<property name="build-lib.dir" value="build-lib" />
	<property name="dist.dir" value="dist" />
	<property name="build.dir" value="build/classes" />
	<property name="junit.reports.dir" value="test/reports" />
	
	<path id="build-classpath">
		<fileset dir="${lib.dir}">
			<include name="*.jar" />
		</fileset>
		<fileset dir="${build-lib.dir}">
			<include name="*.jar" />
		</fileset>
		<pathelement path="${build.dir}" />
		<pathelement path="${web.dir}/WEB-INF/" />
	</path>
	
	<path id="test-classpath">
		<fileset dir="${lib.dir}">
			<include name="*.jar" />
		</fileset>
		<fileset dir="${build-lib.dir}">
			<include name="*.jar" />
		</fileset>
		<pathelement path="${build.dir}" />
		<pathelement path="${test.dir}" />
		<pathelement path="${web.dir}/WEB-INF/" />
	</path>

	<target name="usage">
		<echo message="" />
		<echo message="${name} build file" />
		<echo message="-----------------------------------" />
		<echo message="" />
		<echo message="Available targets are:" />
		<echo message="" />
		<echo message="clean     --> Clean-up open-tides library files" />
		<echo message="build     --> Compiles open-tides library" />
		<echo message="build-jar --> Create open-tides.jar file" />
		<echo message="tide      --> Synchronize the library to an eclipse project" />
		<echo message="untide    --> Remove open-tides to an eclipse project. Not yet available." />
		<echo message="run-test  --> Execute all JUnit test" />
		<echo message="all       --> Clean, runs JUnit test and create jar" />
		<echo message="" />
	</target>

	<target name="clean">
		<delete dir ="${build.dir}" />
		<delete dir="${dist.dir}" />
	</target>

	<target name="build" description="Compile main source tree java files">
		<mkdir dir="${build.dir}" />
		<javac destdir="${build.dir}" debug="true" deprecation="false" optimize="false" failonerror="true" encoding="ISO-8859-1">
			<src path="${src.dir}" />
			<classpath refid="build-classpath" />
		</javac>
		<copy todir="${build.dir}" preservelastmodified="true">
			<fileset dir="${src.dir}">
				<include name="**/*.tag" />
				<include name="**/*.tld" />
				<include name="**/*.properties" />
				<include name="**/*.xml" />
				<include name="**/*.vm" />
			</fileset>
		</copy>
		<copy todir="${build.dir}/resources" preservelastmodified="true">
			<fileset dir="${web.dir}/WEB-INF">
				<include name="**/*.xml" />
			</fileset>
		</copy>			
	</target>
	
	<target name="build-jar" depends="build" description="Creates the library Jar file">
		<mkdir dir="${dist.dir}" />
		<jar destfile="${dist.dir}/opentides.jar">
			<fileset dir="${build.dir}">
				<include name="**/*.class" />
				<include name="**/*.properties" />
				<include name="**/persistence.xml" />
				<include name="**/*.tag" />
				<include name="**/*.tld" />
				<include name="**/*.cfg.xml" />
				<include name="**/*.vm" />
				<exclude name="**/resource/java/*" />
				<exclude name="**/*Test.class" />
				<exclude name="**/hightides.properties" />
			</fileset>
		</jar>
	</target>

	<target name="tide-lex" depends="build-jar" description="Synchronize the library to CMIS">
		<property name="target.web.dir" value="../../lex_sts/legal-search/${web.dir}" />
		<property name="target.src.dir" value="../../lex_sts/legal-search/${src.dir}" />
		<copy todir="${target.web.dir}" preservelastmodified="true">
			<fileset dir="${web.dir}">
				<include name="**/*.*" />
			</fileset>
		</copy>
		<copy todir="${target.web.dir}/WEB-INF/lib" preservelastmodified="true" file="${dist.dir}/opentides.jar" />	
		<copy todir="${target.web.dir}/WEB-INF/classes/${resources}" preservelastmodified="true">
			<fileset dir="${resources.dir}">
				<include name="themes/*.properties" />
			</fileset>
		</copy>
	</target>
	
	<target name="tide" depends="build-jar" description="Synchronize the library to an eclipse project">
		<input message="Please enter Eclipse project to tide :" addproperty="deploy.dir"/>
		<property name="target.web.dir" value="../${deploy.dir}/${web.dir}" />
		<property name="target.src.dir" value="../${deploy.dir}/${src.dir}" />
		<copy todir="${target.web.dir}" preservelastmodified="true">
			<fileset dir="${web.dir}">
				<include name="**/*.*" />
			</fileset>
		</copy>
		<copy todir="${target.web.dir}/WEB-INF/lib" preservelastmodified="true" file="${dist.dir}/opentides.jar" />	
		<copy todir="${target.web.dir}/WEB-INF/classes/${resources}" preservelastmodified="true">
			<fileset dir="${resources.dir}">
				<include name="themes/*.properties" />
			</fileset>
		</copy>
	</target>

	<target name="build-test" description="Compile main source all JUnit test files">
		<mkdir dir="${build.dir}" />
		<javac destdir="${build.dir}" debug="true" deprecation="false" optimize="false" failonerror="true">
			<src path="${test.dir}" />
			<classpath refid="test-classpath" />
		</javac>
	</target>
	
	<target name="run-test" depends="build,build-test" description="Runs all Junit test scripts">
		<mkdir dir="${junit.reports.dir}" />
		<junit printsummary="yes" fork="yes" haltonfailure="no">
			<classpath refid="test-classpath" />
			<formatter type="plain" />
			<batchtest fork="yes" todir="${junit.reports.dir}">
				<fileset dir="${test.dir}">
					<include name="**/*Test.java" />
					<exclude name="**/AllTests.java" />
				</fileset>
			</batchtest> 
		</junit>
	</target>
	
	<target name="all" depends="clean,run-test,build-jar" description="Clean, run tests and build jar"/>

</project>
