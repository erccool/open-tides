/*
   Licensed to the Apache Software Foundation (ASF) under one
   or more contributor license agreements.  See the NOTICE file
   distributed with this work for additional information
   regarding copyright ownership.  The ASF licenses this file
   to you under the Apache License, Version 2.0 (the
   "License"); you may not use this file except in compliance
   with the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing,
   software distributed under the License is distributed on an
   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   KIND, either express or implied.  See the License for the
   specific language governing permissions and limitations
   under the License.    
 */
package org.opentides.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.servlet.http.HttpServletRequest;

import org.apache.log4j.Logger;
import org.opentides.bean.UrlResponseObject;
import org.opentides.bean.Widget;
import org.opentides.bean.user.BaseUser;
import org.opentides.persistence.WidgetDAO;
import org.opentides.service.WidgetService;
import org.opentides.util.SecurityUtil;
import org.opentides.util.StringUtil;
import org.opentides.util.UrlUtil;
import org.springframework.transaction.annotation.Transactional;

/**
 * This is the service implementation for Widget.
 * Auto generated by high tides.
 * @author hightides
 *
 */
public class WidgetServiceImpl extends BaseCrudServiceImpl<Widget>
		implements WidgetService {
//-- Start custom codes. Do not delete this comment line.

	private static Logger _log = Logger
			.getLogger(WidgetServiceImpl.class);
	
	private String widgetColumn;
	
	private String IPAddress;
	
	private static Pattern pattern = Pattern.compile("<img\\s[^>]*src=\"?(.*?)[\" ]",
			Pattern.CASE_INSENSITIVE|Pattern.MULTILINE);
	
	@Transactional(readOnly = true)
	public Widget findByName(String name) {
		Widget example = new Widget();
		example.setName(name);
		List<Widget> dashboardList = getDao().findByExample(example, true);
		if (dashboardList != null && dashboardList.size() > 0) {
			return dashboardList.get(0);
		}
		return null;
	}
	
	@Transactional(readOnly = true)
	public Widget findByUrl(String url) {
		Widget example = new Widget();
		example.setUrl(url);
		List<Widget> dashboardList = getDao().findByExample(example, true);
		if (dashboardList != null && dashboardList.size() > 0) {
			return dashboardList.get(0);
		}
		return null;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.opentides.service.WidgetService#requestWidget(java.lang
	 * .String)
	 */
	public Widget requestWidget(String widgetUrl, String name, HttpServletRequest req) {
		Widget widget = findByName(name);
		if (widget != null) {
			long now = System.currentTimeMillis();
			Date lastCacheDate = widget.getLastCacheUpdate();

			boolean useCache = false;
			// check if we should use cache or not
			if (lastCacheDate != null) {
				long expire = widget.getLastCacheUpdate().getTime()
						+ widget.getCacheDuration() * 1000;
				if (widget.getCacheType().startsWith(
						Widget.TYPE_IMAGE)
						|| now < expire)
					useCache = true;
			}
			if (useCache) {
				_log.debug("Reusing widget [" + widget.getName()
						+ "] from cache...");
				// retrieve from cache
				return widget;
			} else {
				// retrieve from url
				String url = widget.getUrl();
				if (!UrlUtil.hasProtocol(url)) {
					String slash = "/";
					if (!url.startsWith("/")) {
						url = slash + url;
					}
					url = req.getContextPath().toString() + url;
					if (req.getServerPort() != 80) {
						url = ":" + Integer.toString(req.getServerPort()) + url;
					}
					url = UrlUtil.ensureProtocol(req.getServerName() + url);
				}
				
				// set the IP Address as param
				Map<String, Object> param = new HashMap<String, Object>();				
				if (StringUtil.isEmpty(IPAddress))
					param.put("IPAddress", IPAddress);
				
				UrlResponseObject response = UrlUtil.getPage(url, req, param);
				if (response==null)
					return null;
				if (response.getResponseType()
						.startsWith(Widget.TYPE_IMAGE)) {
					_log.debug("Retrieving image [" + widget.getName()
							+ "] from url [" + widget.getUrl() + "]...");
					widget.setCacheType(response.getResponseType());
					widget.setCache(response.getResponseBody());
					widget.setLastCacheUpdate(new Date());
					save(widget);
					_log.debug("Saved image [" + widget.getName()
							+ "] to cache...");
					return widget;
				} else {
					_log.debug("Retrieving widget [" + widget.getName()
							+ "] from url [" + widget.getUrl() + "]...");
					widget.setCacheType(response.getResponseType());
					// check for image inside the html
					String html = new String(response.getResponseBody());
					String hostname = UrlUtil.getHostname(url);
					Matcher matcher = pattern.matcher(html);
					while (matcher.find()) {
						// add image link to cache
						String imageUrl = matcher.group(1);
						String cacheUrl = imageUrl;
						if (!UrlUtil.hasProtocol(cacheUrl)) {
							if (!imageUrl.startsWith("/")) { 
								cacheUrl = "http://" + hostname + "/" + imageUrl;
							} else {
								cacheUrl = "http://" + hostname  + imageUrl;
							}
						}
						String imageName = this.addCache(cacheUrl, req, widget);
						// replace html that reference to image with cached image
						String newUrl = widgetUrl+"?name="+imageName;
						html = html.replace(imageUrl, newUrl);
					}
					widget.setCache(html.getBytes());
					widget.setLastCacheUpdate(new Date());
					save(widget);
					_log.debug("Saved widget [" + widget.getName()
							+ "] to cache...");
					return widget;
				}
			}
		}
		return null; 
	}

	/**
	 * Private helper to save image cache.
	 * 
	 * @param imageUrl
	 * @return
	 */
	private String addCache(String url, HttpServletRequest req, Widget parentSettings) {
		Widget settings = this.findByUrl(url);
		if (settings == null)
			settings = new Widget(url, parentSettings);
		UrlResponseObject response = UrlUtil.getPage(url, req, null);
		if (response.getResponseType().startsWith(Widget.TYPE_IMAGE))
			settings.setCacheType(Widget.TYPE_IMAGE);
		else
			settings.setCacheType(Widget.TYPE_HTML);
		settings.setCache(response.getResponseBody());
		this.save(settings);
		settings.setName(""+settings.getId());
		this.save(settings);
		return settings.getName();
	}
	
	/**
	 * Returns all the widgets that are available and accessible
	 * to the current user.
	 * @return
	 */
	@Transactional(readOnly=true)
	public List<Widget> getCurrentUserWidgets() {
		Widget example = new Widget();
		example.setIsUserDefined(true);
		List<Widget> widgets = new ArrayList<Widget>();
		for (Widget widget:findByExample(example, true)) {
			if (StringUtil.isEmpty(widget.getAccessCode()))
				widgets.add(widget);
			else if (SecurityUtil.currentUserHasPermission(widget.getAccessCode())) 
				widgets.add(widget);					
		}
		return widgets;
	}
	
	/**
	 * Returns all the default widgets for the user
	 * @param user
	 * @return
	 */
	@Override
	@Transactional(readOnly=true)
	public List<Widget> findDefaultWidget(BaseUser user) {
		return ((WidgetDAO) getDao()).findDefaultWidget(user);
	}

	/**
	 * Setter method for iPAddress.
	 *
	 * @param iPAddress the iPAddress to set
	 */
	public void setIPAddress(String iPAddress) {
		IPAddress = iPAddress;
	}

	public void setWidgetColumn(String widgetColumn) {
		this.widgetColumn = widgetColumn;
	}
	
	public String getWidgetColumn() {
		return widgetColumn;
	}

	public int getColumnConfig() {
		return StringUtil.convertToInt(getWidgetColumn(),2);
	}
	//-- End custom codes. Do not delete this comment line.
	
}
