/*
   Licensed to the Apache Software Foundation (ASF) under one
   or more contributor license agreements.  See the NOTICE file
   distributed with this work for additional information
   regarding copyright ownership.  The ASF licenses this file
   to you under the Apache License, Version 2.0 (the
   "License"); you may not use this file except in compliance
   with the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing,
   software distributed under the License is distributed on an
   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   KIND, either express or implied.  See the License for the
   specific language governing permissions and limitations
   under the License.    
 */
package org.opentides.service;

import java.util.List;

import org.opentides.bean.UserWidgets;
import org.opentides.bean.Widget;
import org.opentides.bean.user.BaseUser;
import org.opentides.bean.user.UserGroup;
import org.opentides.bean.user.UserRole;

/**
 * This is the service interface for UserWidgets.
 * Auto generated by high tides.
 * @author hightides
 */
 
public interface UserWidgetsService extends BaseCrudService<UserWidgets> {
//-- Start custom codes. Do not delete this comment line.
	public void addUserWidgets(long userId, String selectedWidgets);
	
	/**
	 * Add user widgets based on user id and widget object
	 * @param userId - Id of a user
	 * @param widget - Widget Object
	 */
	public void addUserWidgets(long userId, Widget widget);
	
	
	/**
	 * Retrieve all widgets of a user based on the given status
	 * @param userId - the user
	 * @param widgetStatus - array's of widget status
	 * @return List of UserWidgets object
	 */
	public List<UserWidgets> findUserWidgets(long userId, Integer... widgetStatus);
	
	/**
	 * Retrieve a user widget based on name
	 * @param widgetName - the widget name
	 * @param user - base user object
	 * @return single UserWidgets object
	 */
	public UserWidgets findSpecificUserWidgets(BaseUser user, String widgetName);
	
	/**
	 * Update row and column of a user widget
	 * @param userWidgets - UserWidgets object
	 * @param column - int column position
	 * @param row - int row position
	 * @return 
	 */
	public void updateUserWidgetsOrder(UserWidgets userWidgets, int column, int row);
	
	/**
	 * Change the status of our user widgets
	 * @param userWidgets - UserWidgets object
	 * @param status - Integer status (remove, show or minimize)
	 */
	public void updateUserWidgetsStatus(UserWidgets userWidgets, Integer status);
	
	/**
	 * Count user widget installed based on userid and column number
	 * @param column - the column to count widgets
	 * @param userId - specific user
	 */
	public long countUserWidgetsColumn(Integer column, long userId);
	
	/**
	 * Removes the user widgets for all widget with the given access roles and usergroup.
	 * Note that list of access roles pertains to all of the usergroups's access roles, including non-widget
	 * specific roles. The method will be responsible in weeding out non-widget-specific access roles.
	 * 
	 * @param userId
	 * @param userAccessRoles
	 */
	public void removeUserGroupWidgetsWithAccessCodes(UserGroup userGroup, List<UserRole> userAccessRoles);
	
//-- End custom codes. Do not delete this comment line.
}
